# vim: set filetype=python :

sources="""
    fs.cpp
    request.cpp
    well_known_srs.cpp
    params.cpp
    image_filter_types.cpp
    miniz_png.cpp
    color.cpp
    conversions.cpp
    image_compositing.cpp
    image_scaling.cpp
    box2d.cpp
    datasource_cache.cpp
    datasource_cache_static.cpp
    debug.cpp
    expression_node.cpp
    expression_string.cpp
    expression.cpp
    transform_expression.cpp
    feature_kv_iterator.cpp
    feature_style_processor.cpp
    feature_type_style.cpp
    font_engine_freetype.cpp
    font_set.cpp
    function_call.cpp
    gradient.cpp
    graphics.cpp
    parse_path.cpp
    image_reader.cpp
    image_util.cpp
    layer.cpp
    map.cpp
    load_map.cpp
    memory.cpp
    palette.cpp
    plugin.cpp
    rule.cpp
    save_map.cpp
    wkb.cpp
    projection.cpp
    proj_transform.cpp
    scale_denominator.cpp
    simplify.cpp
    parse_transform.cpp
    memory_datasource.cpp
    symbolizer.cpp
    symbolizer_keys.cpp
    symbolizer_enumerations.cpp
    unicode.cpp
    raster_colorizer.cpp
    mapped_memory_cache.cpp
    marker_cache.cpp
    svg/svg_parser.cpp
    svg/svg_path_parser.cpp
    svg/svg_points_parser.cpp
    svg/svg_transform_parser.cpp
    warp.cpp
    css_color_grammar.cpp
    text/vertex_cache.cpp
    text/text_layout.cpp
    text/text_line.cpp
    text/itemizer.cpp
    text/scrptrun.cpp
    text/face.cpp
    text/placement_finder.cpp
    text/properties_util.cpp
    text/renderer.cpp
    text/symbolizer_helpers.cpp
    text/text_properties.cpp
    text/formatting/base.cpp
    text/formatting/list.cpp
    text/formatting/text.cpp
    text/formatting/format.cpp
    text/formatting/layout.cpp
    text/formatting/registry.cpp
    text/placements/registry.cpp
    text/placements/base.cpp
    text/placements/dummy.cpp
    text/placements/list.cpp
    text/placements/simple.cpp
    group/group_layout_manager.cpp
    group/group_rule.cpp
    group/group_symbolizer_helper.cpp
    xml_tree.cpp
    config_error.cpp
    color_factory.cpp
    renderer_common.cpp
    renderer_common/render_pattern.cpp
    renderer_common/process_group_symbolizer.cpp
""".split()

sources += """
    agg/agg_renderer.cpp
    agg/process_building_symbolizer.cpp
    agg/process_line_symbolizer.cpp
    agg/process_line_pattern_symbolizer.cpp
    agg/process_text_symbolizer.cpp
    agg/process_point_symbolizer.cpp
    agg/process_polygon_symbolizer.cpp
    agg/process_polygon_pattern_symbolizer.cpp
    agg/process_raster_symbolizer.cpp
    agg/process_shield_symbolizer.cpp
    agg/process_markers_symbolizer.cpp
    agg/process_group_symbolizer.cpp
    agg/process_debug_symbolizer.cpp
""".split()

sources+="""
    grid/grid.cpp
    grid/grid_renderer.cpp
    grid/process_building_symbolizer.cpp
    grid/process_line_pattern_symbolizer.cpp
    grid/process_line_symbolizer.cpp
    grid/process_markers_symbolizer.cpp
    grid/process_point_symbolizer.cpp
    grid/process_polygon_pattern_symbolizer.cpp
    grid/process_polygon_symbolizer.cpp
    grid/process_raster_symbolizer.cpp
    grid/process_shield_symbolizer.cpp
    grid/process_text_symbolizer.cpp
    grid/process_group_symbolizer.cpp
""".split()

sources += """
    libxml2_loader.cpp
""".split()

sources += """
    feature_style_processor.cpp
""".split()

sources += """
jpeg_reader.cpp
""".split()

sources += """
tiff_reader.cpp
""".split()

sources += """
png_reader.cpp
""".split()

'''
sources += """
    svg/output/svg_renderer.cpp
    svg/output/svg_generator.cpp
    svg/output/svg_output_attributes.cpp
    svg/output/process_symbolizers.cpp
    svg/output/process_building_symbolizer.cpp
    svg/output/process_line_pattern_symbolizer.cpp
    svg/output/process_line_symbolizer.cpp
    svg/output/process_markers_symbolizer.cpp
    svg/output/process_point_symbolizer.cpp
    svg/output/process_polygon_pattern_symbolizer.cpp
    svg/output/process_polygon_symbolizer.cpp
    svg/output/process_raster_symbolizer.cpp
    svg/output/process_shield_symbolizer.cpp
    svg/output/process_text_symbolizer.cpp
    svg/output/process_group_symbolizer.cpp
""".split()
'''

sources += """
    cairo/cairo_context.cpp
    cairo/cairo_renderer.cpp
    cairo/cairo_render_vector.cpp
    cairo/process_markers_symbolizer.cpp
    cairo/process_text_symbolizer.cpp
    cairo/process_group_symbolizer.cpp
    cairo/process_line_symbolizer.cpp
    cairo/process_line_pattern_symbolizer.cpp
    cairo/process_polygon_symbolizer.cpp
    cairo/process_polygon_pattern_symbolizer.cpp
    cairo/process_debug_symbolizer.cpp
    cairo/process_point_symbolizer.cpp
    cairo/process_raster_symbolizer.cpp
    cairo/process_building_symbolizer.cpp
""".split()

def build(bld):
    bld.shlib(
        name="mapnik",
        target="mapnik",
        source=sources,
        includes="../deps ../include",
        defines="GRID_RENDERER",
        export_includes="../include ..",
        use="AGG HARFBUZZ HARFBUZZ_ICU FREETYPE LTDL PNG TIFF JPEG LIBXML2 PROJ CAIROMM ICU BOOST_REGEX BOOST_FILESYSTEM BOOST_THREAD")
